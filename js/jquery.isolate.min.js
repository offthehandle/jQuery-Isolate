/*
 * Isolate Plugin for jQuery JavaScript Library
 * 
 * Copyright (c) 2014-2018 Adam J De Lucia
 * Licensed under the MIT License.
 * http://opensource.org/licenses/MIT
 * 
 * Author: Adam J De Lucia
 * Version: 2.0.0
 * Date: March 1, 2018
 * 
 */
var isolate, IsolateDefaultSettings = function () { function n() { this.settings = { isolate: !0, filters: $("#iso-filters"), filteredList: $("#isos"), filterClass: ".filter", iso: "li", isoGrid: !1, bootstrap: !0, version: 3, breakpoint: "md", bsSpan: 3, columns: 4, setup: null, start: null, complete: null } } return n }(), IsolatePlugin = function () { function n(n, t) { var i = this; if (this.default = new IsolateDefaultSettings, isolate = this, this.rootElement = n, this.settings = $.extend(this.default.settings, t), this.instanceID = "#" + this.rootElement.attr("id"), this.filtersMap = this.getFiltersMap(), this.isolatedEls = [], this.filteredEls = [], this.version = this.settings.version.toString(), this.majorVersion = Number(this.version.substring(0, 1)), this.createGridSystem(), this.settings.isolate === !0) this.settings.filters.on("click.isolate", this.settings.filterClass, this.isolate); else this.settings.filters.on("click.isolate", this.settings.filterClass, this.filter); setTimeout(function () { $.isFunction(i.settings.setup) && i.settings.setup.call(i.rootElement, i.filtersMap); $(i.instanceID).trigger("isolate.setup", [i.filtersMap]) }, 200) } return n.prototype.isolate = function () { var n = $(this).attr("id"), r = "." + n, u = "#" + n, t, i, f; $.isFunction(isolate.settings.start) && isolate.settings.start.call(this, isolate.filtersMap, n); $(isolate.instanceID).trigger("isolate.start", [this, isolate.filtersMap, n]); isolate.settings.filteredList.find(isolate.settings.iso).show(); for (t in isolate.filtersMap) if (t === n && isolate.filtersMap[t] === "isInactive") { isolate.isolatedEls.push(r); isolate.settings.filteredList.find($(isolate.settings.iso).not(isolate.isolatedEls.toString())).hide(); isolate.filtersMap[t] = "isActive"; isolate.settings.filters.find(u).addClass("active"); break } else if (t === n && isolate.filtersMap[t] === "isActive") { for (i = 0, f = isolate.isolatedEls.length; i < f; i++) if (isolate.isolatedEls[i] === r) { isolate.isolatedEls.splice(i, 1); break } isolate.isolatedEls.length && isolate.settings.filteredList.find($(isolate.settings.iso).not(isolate.isolatedEls.toString())).hide(); isolate.filtersMap[t] = "isInactive"; isolate.settings.filters.find(u).removeClass("active"); break } $.isFunction(isolate.settings.complete) && isolate.settings.complete.call(this, isolate.filtersMap, n, isolate.isolatedEls); $(isolate.instanceID).trigger("isolate.complete", [this, isolate.filtersMap, n, isolate.isolatedEls]) }, n.prototype.filter = function () { var n = $(this).attr("id"), r = "." + n, u = "#" + n, t, i, f; $.isFunction(isolate.settings.start) && isolate.settings.start.call(this, isolate.filtersMap, n); $(isolate.instanceID).trigger("isolate.filter.start", [this, isolate.filtersMap, n]); isolate.settings.filteredList.find(isolate.settings.iso).show(); for (t in isolate.filtersMap) if (t === n && isolate.filtersMap[t] === "isInactive") { isolate.filteredEls.push(r); isolate.settings.filteredList.find(isolate.filteredEls.toString()).hide(); isolate.filtersMap[t] = "isActive"; isolate.settings.filters.find(u).addClass("active"); break } else if (t === n && isolate.filtersMap[t] === "isActive") { for (i = 0, f = isolate.filteredEls.length; i < f; i++) if (isolate.filteredEls[i] === r) { isolate.filteredEls.splice(i, 1); break } isolate.filteredEls.length && isolate.settings.filteredList.find(isolate.filteredEls.toString()).hide(); isolate.filtersMap[t] = "isInactive"; isolate.settings.filters.find(u).removeClass("active"); break } $.isFunction(isolate.settings.complete) && isolate.settings.complete.call(this, isolate.filtersMap, n, isolate.filteredEls); $(isolate.instanceID).trigger("isolate.filter.complete", [this, isolate.filtersMap, n, isolate.filteredEls]) }, n.prototype.createGridSystem = function () { var t, i, n; (this.settings.bootstrap === !0 || this.settings.isoGrid === !0) && (t = "", t = this.settings.bootstrap === !0 ? "col" : "iso", this.settings.breakpoint !== null && $.trim(this.settings.breakpoint) !== "" && (t += "-" + $.trim(this.settings.breakpoint)), this.settings.bootstrap === !0 && this.settings.bsSpan !== null && $.trim(this.settings.bsSpan) !== "" && (t += "-" + $.trim(this.settings.bsSpan)), this.settings.isoGrid === !0 && this.settings.columns !== null && $.trim(this.settings.columns) !== "" && (t += "-" + $.trim(this.settings.columns)), this.settings.filteredList.find(this.settings.iso).addClass(t), i = t.split("-"), n = !0, this.settings.bootstrap && this.majorVersion === 3 && (n && i.length !== 3 && (alert("Bootstrap 3 requires both breakpoint and bsSpan options. Please check your configuration."), n = !1), n && ["xs", "sm", "md", "lg"].indexOf($.trim(this.settings.breakpoint)) === -1 && (alert("Bootstrap 3 supports breakpoints xs, sm, md and lg. You entered " + this.settings.breakpoint + ".\n\n Please use a supported breakpoint."), n = !1), n && isNaN(this.settings.bsSpan) && (alert("Bootstrap 3 supports numbers for bsSpan. You entered " + this.settings.bsSpan + ".\n\n Please enter a supported bsSpan as a number or string."), n = !1)), this.settings.bootstrap && this.majorVersion === 4 && (n && this.settings.breakpoint !== null && $.trim(this.settings.breakpoint) !== "" && ["xs", "sm", "md", "lg", "xl"].indexOf($.trim(this.settings.breakpoint)) === -1 && (alert("Bootstrap 4 supports breakpoints xs, sm, md, lg and xl. You entered " + this.settings.breakpoint + ".\n\n Please use a supported breakpoint."), n = !1), n && this.settings.bsSpan !== null && $.trim(this.settings.bsSpan) !== "" && (n && typeof this.settings.bsSpan != "number" && typeof this.settings.bsSpan != "string" && (alert("Bootstrap 4 supports only a number or auto for bsSpan. You entered " + this.settings.bsSpan + ".\n\n Please enter a supported bsSpan as a number or string. Also, null or an empty string is valid."), n = !1), n && typeof this.settings.bsSpan == "string" && this.settings.bsSpan !== "auto" && isNaN(Number(this.settings.bsSpan)) && (alert("Bootstrap 4 supports only a number or auto for bsSpan. You entered " + this.settings.bsSpan + ".\n\n Please enter a supported bsSpan as a number or string. Also, null or an empty string is valid."), n = !1)))) }, n.prototype.getFiltersMap = function () { var n = {}; return this.settings.filters.find(this.settings.filterClass).each(function () { var t = $(this).attr("id"); n[t] = "isInactive" }), n }, n }(); IsolatePlugin.NAME = "isolate", function (n) { n.fn[IsolatePlugin.NAME] = function (n) { this.each(new IsolatePlugin(this, n)) } }(jQuery);
//# sourceMappingURL=jquery.isolate.min.js.map
